김일성종합대학학보 정보과학 주체107(2018)년 제64권  제3호 smali코드에서 식별자이름변경의 한가지 실현방법 오영근, 김경석 위대한 령도자 동지께서는 다음과 같이 교시하시였다. 《다른 나라의 선진과학기술을 우리 혁명의 요구와 우리 나라의 실정에 맞게 연구도 입하여 우리의것으로 만들면 그것도 주체적립장에서 과학기술을 발전시키는것으로 됩니 다.》(《선집》 증보판 제22권 24페지) 현재 국내에서 리용되고있는 Android응용프로그람들중 많은 부분이 국내외에서 이미 개발되였던 프로그람에 대한 역공학을 통해 재생산된것들이며 역공학을 통한 새 기술획 득도 나라의 정보산업발전에 많은 기여를 하고있다. Apktool, VTS[3]와 같은 많은 도구들이 Android응용프로그람의 역공학에 리용되고있으며 이와 함께 보안기술도 발전하고있다. 론문에서는 smali코드를 리용하여 Android실행화일해석에 도움을 줄수 있는 식별자이 름회복을 지원하는 한가지 방법에 대하여 제안하였다. １．해석방지기술 Android응용프로그람에 대한 해석은 크게 두 단계로 나누어 진행되는데 첫번째 단계 는 원천코드화단계이고 두번째 단계는 코드해석 및 수정단계이다. Apkprotect와 같이 허위코드와 무한순환, 오유코드를 삽입하여 원천코드추출을 막으려 는 프로그람들이 이미 개발되여있지만 이에 대응하는 해석도구들도 많이 개발되여 이것 은 피할수 없다. 두번째 단계인 코드해석 및 수정을 방지하는 기술을 코드혼란기술 또는 난해처리 (obfuscation)기술[2]이라고 한다. 난해처리는 프로그람의 기능은 변화시키지 않으면서도 프로그람을 공격자가 리해하 기 어렵도록 변경하는 의미보존프로그람변환[1]이다. 현재 가장 우수한 난해처리프로그람들로는 KlassMaster, J Shrink, ProGuard, Dash-O를 들 수 있다. 난해처리기술에는 조종흐름변경(Changing of Control Flow), 문자렬암호화(Encoding Java Strings), 식별자이름변경(Name Mangling)들이 있다. 조종흐름변경난해처리는 허위코드삽입, 명령분해와 같은 기술을 리용하여 조종흐름을 복잡하게 만드는것이다. 문자렬암호화난해처리는 코드안에 있는 통보문과 같은 문자렬을 복호화함수를 거쳐 야 정확한 문자렬이 나오도록 암호화하여 코드해석을 위한 정보를 얻지 못하도록 하는 기술이다. 식별자이름변경난해처리는 패키쥐이름, 클라스이름, 함수이름, 변수이름과 같은 의미 있는 이름들을 의미없는 문자렬들로 교체하여 프로그람의 실행에는 영향을 주지 않으면 smali코드에서 식별자이름변경의 한가지 실현방법 － 35 － 서도 역공학에 의해 얻어지는 코드를 리해하기 어렵게 만드는 기술이다. 현대적인 역공학도구들에서 조종흐름변경과 문자렬암호화난해처리에 대한 해석을 지 원하지만 식별자이름변경난해처리에 대한 회복기능은 지원하지 않는다. 이로부터 론문에 서는 Android응용프로그람의 역공학에서 식별자이름회복을 지원하는 기능을 실현하기 위 한 한가지 방법을 제안하였다. ２．식별자이름회복지원기능의 실현 우리는 baksmali/smali를 리용하여 얻어지는 smali코드를 해석하고 식별자들사이의 관 계그라프를 구축하여 해석자가 식별자들의 이름을 회복할수 있도록 지원하는 기능을 실 현하였다. １）smali코드해석부의 설계 론문에서는 예약어방식으로 어휘해석을 진행하였다. 이때 클라스정의, 클라스계승, 대 면부구현, 함수정의, 함수참조, 성원변수정의, 성원변수참조와 관련되는 예약어들은 표 1 과 같다. 표 １．smali코드에서 일부 예약어들 예약어 .class .super .implements .method .end method .field .local invoke-* const-class new-instance new-array instance-of sget-* sput-* iget-* iput-* 해 설 클라스정의 클라스계승 대면부구현 함수시작 함수끝 성원변수정의 국부변수정의 함수호출 클라스형상수창조 클라스형변수창조 클라스형배렬창조 자료형검사 정적성원변수를 등록기에 적재 등록기값을 정적성원변수에 넣기 성원변수를 등록기에 적재 등록기값을 성원변수에 넣기 표 1과 같은 예약어를 만나면 그 행을 문장해석단계에 넘긴다. 문장해석단계에서는 식별자만을 추출하여 해석자로부터 이름변경요청이 들어올 때마다 쉽게 변경을 진행할수 있는 호출계승관계그라프형 자료구조로 보관한다. ２）호출, 계승관계그라프구축과 이름회복 호출, 계승관계그라프를 다음과 같이 정의한다. , , VFCPG = FC ,{ CC CP PP , , , , , FF , VC , FcF , FcV } － 36 － 종합대학학보 정보과학 주체107(2018)년 제64권 제3호 여기서 P는 패키쥐모임, C는 클라스모임, F는 함수모임, V는 성원변수모임이며 이것들은 그라프에서 마디점들로 표시된다. 또한 PP는 패키쥐들의 소속관계, CP는 클라스와 패키쥐 사이의 소속관계, CC는 클라스들사이의 계승관계, FC는 함수와 클라스사이의 소속관계, FF는 함수들사이의 재정의관계, VC는 성원변수와 클라스사이의 소속관계, FcF는 함수들사 이의 호출관계, FcV는 함수와 변수사이의 참조관계를 나타내며 그라프에서 방향마디로 표 시된다. 호출, 계승관계그라프구축흐름도는 다음과 같다.(그림) 시 작 그라프 G정의 cp = null 코드적재 및 행분할 한행적재, 마지막행 인가? 아니 예 어휘해석진행 끝 예 예 예 예 예 예 예 조건 1 아니 조건 2 아니 조건 3 아니 조건 4 아니 조건 5 아니 조건 6 아니 아니 조건 7 c를 C에 추가, cp가 null이면 cp = c c를 C에 추가, R(c, cp)를 CP에 추가 v를 V에 추가, R(fp, v)를 FcV에 추가 f를 F에 추가, fp = f, R(f, cp)를 FC에 추가 fp = null v를 V에 추가, R(v, cp)를 FcV에 추가 f를 F에 추가, R(fp, f)를 FcF에 추가 그림. 호출, 계승관계그라프구축흐름도 그림에서 조건 1－7의 내용은 표 2와 같다. 표 ２．호출, 계승관계그라프구축흐름도에서 조건들에 대한 해설 조건내용 조건번호 조건 1 행식별자가 .class, .local, const-class, new-instance, new-array, instance-of, check-cast인가? 조건 2 조건 3 조건 4 조건 5 조건 6 조건 7 .super, .implements인가? sget-*, sput-*, iget-*, iput-*인가? .method인가? .end method인가? .field인가? invoke-*인가? 호출, 계승관계그라프를 리용한 이름회복과정은 다음과 같다. ① 이름변경요청을 접수한다. smali코드에서 식별자이름변경의 한가지 실현방법 － 37 － ② 이름변경요청의 목적대상을 확인하고 이름이 중복되지 않는가를 검사한다. ③ 목적대상이 패키쥐 p이면 그라프에서 관계 PP, CP를 조사하여 p에 속하는 패키쥐 들과 클라스들에 대하여 p의 이전이름과 새 이름을 가지고 각각 smali문법의 패키쥐선언 문을 만들어 문자렬치환처리를 진행한다. ④ 요청대상이 클라스 c이면 그라프에서 관계 CC, FC, VC를 조사하여 c와 관련되는 클라스, 함수, 성원변수들을 조사하여 c의 이전이름과 새 이름을 가지고 각각 smali문법의 클라스선언문을 만들어 문자렬치환처리를 진행한다. ⑤ 요청대상이 함수 f이면 그라프에서 관계 FF를 조사하여 함수 f를 재정의한 함수들 과 f가 재정의한 함수들에 대하여 f의 이전이름과 새 이름을 가지고 각각 smali문법의 함 수선언문을 만들어 문자렬치환처리를 진행한다. ⑥ 요청대상이 성원변수 v이면 관계 VC에서 v가 정의된 클라스 c를 찾고 관계 CC에 서 c로부터 파생된 클라스들을 찾아서 v의 이전이름과 새 이름을 가지고 각각 smali문법 의 변수선언문을 만들어 문자렬치환처리를 진행한다. 이름변경난해처리된 Android실행화일해석에서 smali코드를 리용하여 식별자이름회복 을 지원하는 방법을 제안하여 해석자가 이름회복뿐아니라 그것들사이의 구조적관계도 함 께 참고할수 있게 하였다. 맺 는 말 참 고 문 헌 [1] 김철혁; 정보은닉기술, 과학기술출판사, 138～160, 주체100(2011). [2] 김일성종합대학학보(자연과학), 61, 10, 28, 주체104(2015). [3] Chandan Kumar Behera; Procedia Computer Science, 70, 757, 2015. Study on a Way of Recovering Identifier Names in smali Code 주체107(2018)년 5월 5일 원고접수 O Yong Gun, Kim Kyong Sok In this paper, we have presented a method that recovers the identifier name and supports the smali code analysis by defining the analysis module of smali code and building the call-relationship graph and inheritance-relationship graph. Key words: reverse engineering, obfuscation