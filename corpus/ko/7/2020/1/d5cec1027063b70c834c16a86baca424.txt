김일성종합대학학보 수 학 주체109(2020)년 제66권 제1호 뒤붙이나무에 의한 k－근사문자렬대조의 고속화를 위한  한가지 알고리듬 리지성, 조영선 선행연구[2]에서는 문자렬사이의 편집거리를 계산하기 위한 동적계획법은 k－근사문 자렬대조를 진행하면서 그 위치까지 찾아낼수 있는 효과적인 방법으로 되고있으며 검색 시간은 O(mn)이라는것을 밝혔다. 선행연구[4]에서는 뒤붙이나무를 리용하여 매 가지에서 k－근사문자렬대조를 진행함 으로써 시간을 O(kn)으로 줄인 알고리듬이 제기되였다. 론문에서는 대자료처리분야에서 중요하게 제기되는 근사문자렬대조의 성능을 개선하 기 위하여 뒤붙이나무를 리용하여 k－근사문자렬대조를 진행할 때 뒤붙이나무의 매 가지 에서 대조속도를 높이는 한가지 알고리듬을 제안하였다. 선행연구[2, 3]에서는 보통 k－근사문자렬대조에서는 매 가지에서 견본문자렬의 길이 를 m이라고 할 때 m+k개 문자에 대한 대조를 진행하는데 사실 k개이상의 문자렬이 차이 나면 더이상 대조할 필요가 없다는것을 밝혔다. 그러므로 매 가지에서의 대조과정에 다른 문자라고 판정되면 불일치를 나타내는 계 수기의 값을 증가시키다가 대조위치가 불일치계수기의 값보다 k+1만큼 차이나게 되면 대 조를 다음가지에로 넘긴다. 불일치계수기의 값이 km − 로 되면 k－근사문자렬로 판정할 수 있다. 이것을 실현한 알고리듬을 아래에 서술하였다.  nP 입력: 본문 출력: 본문에서 견본문자렬과 k만큼 차이나는 문자렬의 위치 pos 주어진 본문에 대하여 뒤붙이나무를 구성한다. 우꼬넨의 알고리듬에 의하면 실행시 간은 O(n)이다. 얻어진 뒤붙이나무의 매 가지에 대하여 다음의 알고리듬에 따라 k－근사 문자렬대조를 진행한다. 알고리듬에서 su는 본문문자렬에서 뒤붙이들의 위치, lcp는 린접 한 두 뒤붙이들사이의 최대공통앞붙이의 길이이다. 과 견본문자렬 (cid:34)21= (cid:34)21= PPP TTT nT //새로운 동적계획표작성에 리용되는 렬 //이전가지에서 작성한 동적계획표의 lcp번째 렬로 초기화 while (0 ≤ i ≤ m) do c[i] ←i      end while  pos =su + lcp; while (pos ≤ n) do cnt ← min {pos + k, m}  d[0] ← pos + 1  i ← 0 while(i ≤ cnt) do  if (P[i] = T[pos]) then d[i+1] ← c[i] else // cnt: 불일치계수기 // d[i]: 동적계획표의 새로운 렬 //동적계획표작성단계 － 100 － 종합대학학보 수학 주체109(2020)년 제66권 제1호 //동적계획표에서 k보다 작은 자리찾기 d[i+1] ← min{c[i], d[i], c[i+1]} + 1 end if end while c ← d while (c[cnt] > k) do  cnt ← cnt - 1 end while if(cnt = m) then pos값을 출력  else if(pos > cnt + k) then 다음가지를 탐색   end if end if end while 실례로 T=TACCCTGGCCTGA, P=GTCA, k=2일 때 알고리듬의 실행과정을 보면 다음 // su~pos까지가 구하려는 문자렬이다. //대조중지 과 같다. 먼저 T=TACCCTGGCCTGA의 뒤붙이나무를 구성한다.(그림) 그림. T=TACCCTGGCCTGA의 뒤붙이나무 G T C A 0 1 2 3 4 표. T=TACCCTGGCCTGA, P=GTCA에 대한 동적계획표 T A C C C T G G C C T G A 1 1 1 2 3 2 2 2 2 2 3 3 3 2 3 4 4 4 3 3 5 5 5 4 4 6 6 5 5 5 7 6 6 6 6 8 7 7 7 7 9 8 8 7 8 10 11 9 9 8 8 10 9 9 9 12 11 10 10 10 13 12 11 11 10 다음 뒤붙이나무의 매 가지에 대하여 동적계획법을 리용한 k－근사문자렬대조를 진 행한다. 이를 위한 동적계획표 Mi,j를 작성한다.(표) 여기서 제일 아래행을 고찰하여 k보 다 크지 않은 위치를 택하면 목적하는 위치를 얻게 된다. 뒤붙이나무에 의한 k－근사문자렬대조의 고속화를 위한 한가지 알고리듬 － 101 － 다음으로 알고리듬의 시간복잡도를 평가한다. 보조정리 １ jm ≥ , 1<β 일 때 길이가 j 인 두 우연문자렬들이 길이가 k < 인 부 j 분문자렬들을 포함할 확률이 /1( 2 j αβ) j 보다 크지 않게 되는 (mO=α ) 이 존재한다. 증명 스털링의 공식[1] n ! n ≈ π2 으로부터 cj = 라고 하면 k n ⎛ ⎜ ⎝ n e ⎞ ⎟ ⎠ j ! j − ( cj ()! cj )! 1( += o ))(1( 1(2 c π − cjc ) ⋅ 1( − c ) cj 1( − jc ) 1 − ) 이 성립한다. p 를 구하려는 확률, b 를 자모의 크기라고 할 때 p = j jc ⋅ ⎛ ⎜⎜ ⎝ 2 ⎞ ⎟⎟ ⎠ − cj b ≤ 1( ))1( o m + c c 1(2 ) − π ⋅ 1 2 j c ⋅ ( c 1( − 1 ) c − c − 2 j ) − cj ⋅ b α = 1( ))1( o m + c c 1(2 ) − π , β = ( c 1( − c 1 − ) c c ) − 2 ⋅ b − c 라고 하면 p /1( ≤ (mO=α j ) 이때 2 j 이 성립한다. αβ) 으로 된다.(증명끝) 2 보조정리 ２ 알고리듬에서 증명 = << c 에 대하여 q 1 E cnt ( k 1/(2 − ) c ( + kmO = 라고 하자. 즉 ) 이 성립한다. , jq j ≥∀ ) 2 − 2 k ≥ cj 이다. E ( cnt ) = E ( cnt ) − V ( cnt ) < ( q − )1 2 2 2 + ∑ qj ≥ 2 ( MPj ≤ k ) ij , 을 얻는다. 0 이때 이 성립한다. 을 결합하면 보조정리 1에서 m 을 견본문자렬의 길이로 주면 ( MP ≤ k ) < /1( j 2 j αβ) 이며 두 식 , ij E ( cnt ) < ( q − )1 2 2 + 2 j /1( j 2 ) αβ j = kO ( ) + kmOmO + = ( ( ) 2 2 ) ∑ qj ≥ 이 성립한다.(증명끝) 정리 알고리듬에서 두번째 단계의 평균시간복잡도는 증명 알고리듬이 률을 Pj, 동적계획표에서 갱신된 항들의 개수를 j k + 위치에서 다음가지에로 넘어간다고 하고 이때 이 사건의 확 jN 이라고 하자. 2kmO + 이다. ) ( 매 단계에서 한문자씩 거치는것으로 하여 cnt+1개의 항들이 갱신되며 cnt는 기껏 하 나씩 커진다. 이로부터 다음의 결과를 얻는다. N j k + j ≤ ∑ i 1 = ( k + i ) = k 3( k ++ 4 kj + 2 2 j + j 2/) 한편 NE ( ) ≤ j NP 1 1 + NP 2 2 + (cid:34) + ( P m + P m 1 + ) N m < NP 1 1 + NP 2 2 + (cid:34) + NP mm + NP m 1 + m 1 + － 102 － 종합대학학보 수학 주체109(2020)년 제66권 제1호 이고 알고리듬에서 대조에 참가하는 문자수는 기껏 km + 이므로 NE ( ) = kO ( ) + OkO )( + j 2 ⎛ ⎜ ⎜ ⎝ m + 1 ∑ i = 1 2 iP i ⎞ ⎟ ⎟ ⎠ 이다. 보조정리 2로부터 iE ( ) = kmO + ( ) 이고 우의 두 식을 결합하면 NE ( 2 2 ) = j 2kmO + ( ) 이다.(증명끝) 결과를 종합하면 실행시간이 2kmO + 인것으로 하여 n 의 크기가 큰 대용량본문들 ) ( 에 대하여 대조를 진행할 때 효과적이라는것을 알수 있다. 참 고 문 헌 [1] B. Miklos; A Walk Through Combinatorics, Springer, 132～138, 2004. [2] Yoshimasa Takabatake et al.; Algorithms, 9, 26, 2016. [3] Huan Hu et al.; Knowl. Inf. Syst., 49, 121, 2016.  [4] F. Simone; LNCS 9778, 65, AAIM, 2016. 주체108(2019)년 9월 15일 원고접수 An Algorithm for Making High-Speed −k Approximate  String Matching over Suffix Tree Ri Ji Song, Jo Yong Son In this paper, we propose a k-approximate string matching algorithm that reduces the number of searched characters on each path of suffix tree and uses the dynamic program to reduce its searching time. Keywords: approximate string matching, suffix tree, dynamic programming